// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SBU_HEAD
  SALES
  CSE
  PRICING
  MGMT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CustomerApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RateRequestMode {
  SEA
  AIR
}

enum RateRequestType {
  FCL
  LCL
}

enum RateRequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum BookingRequestStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ItineraryType {
  SP
  CSE
}

enum ItineraryStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum SalesActivityType {
  VISIT
  CALL
  MEETING
}

enum NotificationChannel {
  SYSTEM
  EMAIL
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  phone     String?
  role      UserRole
  status    UserStatus @default(ACTIVE)
  sbuId     String?
  sbu       SBU?       @relation("SBUHead", fields: [sbuId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  customersCreated     Customer[]           @relation("CustomerCreatedBy")
  customersApproved    Customer[]           @relation("CustomerApprovedBy")
  rateRequests         RateRequest[]        @relation("RateRequestSalesperson")
  bookingRequests      BookingRequest[]     @relation("BookingRequestRaisedBy")
  jobsOpened           Job[]                @relation("JobOpenedBy")
  jobCompletions       JobCompletion[]      @relation("JobCompletionCSE")
  itineraries          Itinerary[]          @relation("ItineraryOwner")
  itinerariesApproved  Itinerary[]          @relation("ItineraryApprovedBy")
  salesActivities      SalesActivity[]
  leads                Lead[]               @relation("LeadOwner")
  pricingAssignments   PricingTeamAssignment[]
  notifications        Notification[]
  auditEvents          AuditEvent[]         @relation("AuditEventActor")

  @@map("users")
}

model SBU {
  id         String @id @default(cuid())
  name       String
  headUserId String @unique
  head       User   @relation("SBUHead", fields: [headUserId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users User[]

  @@map("sbus")
}

model Customer {
  id             String                @id @default(cuid())
  companyName    String
  contactName    String
  email          String
  phone          String?
  address        String?
  city           String?
  country        String?
  approvalStatus CustomerApprovalStatus @default(PENDING)
  createdById    String
  createdBy      User                  @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  approvedById   String?
  approvedBy     User?                 @relation("CustomerApprovedBy", fields: [approvedById], references: [id])
  approvedAt     DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // Relations
  rateRequests     RateRequest[]
  bookingRequests  BookingRequest[]
  salesActivities  SalesActivity[]
  itineraryItems   ItineraryItem[]
  leads            Lead[]

  @@map("customers")
}

model TradeLane {
  id       String @id @default(cuid())
  region   String
  name     String
  code     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  predefinedRates     PredefinedRate[]
  pricingAssignments  PricingTeamAssignment[]

  @@map("trade_lanes")
}

model Port {
  id       String @id @default(cuid())
  unlocode String @unique
  name     String
  country  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  predefinedRatesAsPOL PredefinedRate[] @relation("PortPOL")
  predefinedRatesAsPOD PredefinedRate[] @relation("PortPOD")
  rateRequestsAsPOL    RateRequest[]   @relation("RateRequestPOL")
  rateRequestsAsPOD    RateRequest[]   @relation("RateRequestPOD")

  @@map("ports")
}

model ShippingLine {
  id       String @id @default(cuid())
  name     String
  code     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  predefinedRates PredefinedRate[]
  lineQuotes      LineQuote[]

  @@map("shipping_lines")
}

model EquipmentType {
  id                    String @id @default(cuid())
  name                  String
  isReefer              Boolean @default(false)
  isFlatRackOpenTop     Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  predefinedRates PredefinedRate[]
  rateRequests    RateRequest[]
  lineQuotes      LineQuote[]

  @@map("equipment_types")
}

model PricingTeamAssignment {
  id           String     @id @default(cuid())
  tradeLaneId  String
  tradeLane    TradeLane  @relation(fields: [tradeLaneId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([tradeLaneId, userId])
  @@map("pricing_team_assignments")
}

model PredefinedRate {
  id           String     @id @default(cuid())
  tradeLaneId  String
  tradeLane    TradeLane  @relation(fields: [tradeLaneId], references: [id])
  polId        String
  pol          Port       @relation("PortPOL", fields: [polId], references: [id])
  podId        String
  pod          Port       @relation("PortPOD", fields: [podId], references: [id])
  service      String
  equipTypeId  String
  equipType    EquipmentType @relation(fields: [equipTypeId], references: [id])
  isLcl        Boolean
  validFrom    DateTime
  validTo      DateTime
  status       String     @default("active")
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  lineQuotes LineQuote[]

  @@map("predefined_rates")
}

model RateRequest {
  id                  String            @id @default(cuid())
  refNo               String            @unique
  mode                RateRequestMode
  type                RateRequestType
  polId               String
  pol                 Port              @relation("RateRequestPOL", fields: [polId], references: [id])
  podId               String
  pod                 Port              @relation("RateRequestPOD", fields: [podId], references: [id])
  doorOrCy            String?
  usZip               String?
  preferredLineId     String?
  preferredLine       ShippingLine?     @relation(fields: [preferredLineId], references: [id])
  equipTypeId         String
  equipType           EquipmentType     @relation(fields: [equipTypeId], references: [id])
  reeferTemp          Float?
  palletCount         Int?
  palletDims          String?
  hsCode              String?
  weightTons          Float
  incoterm            String?
  marketRate          Float?
  specialInstructions String?
  cargoReadyDate      DateTime?
  vesselRequired      Boolean           @default(false)
  detentionFreeTime   String            @default("7")
  salespersonId       String
  salesperson         User              @relation("RateRequestSalesperson", fields: [salespersonId], references: [id])
  customerId          String
  customer            Customer          @relation(fields: [customerId], references: [id])
  status              RateRequestStatus @default(PENDING)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  responses    RateRequestResponse[]
  lineQuotes   LineQuote[]
  bookingRequests BookingRequest[]

  @@map("rate_requests")
}

model RateRequestResponse {
  id                    String      @id @default(cuid())
  rateRequestId         String
  rateRequest           RateRequest @relation(fields: [rateRequestId], references: [id], onDelete: Cascade)
  lineNo                Int
  requestedLineId       String?
  requestedEquipTypeId  String?
  vesselName            String?
  eta                   DateTime?
  etd                   DateTime?
  fclCutoff             DateTime?
  docCutoff             DateTime?
  validTo               DateTime
  chargesJson           Json
  createdAt             DateTime    @default(now())

  @@map("rate_request_responses")
}

model LineQuote {
  id           String         @id @default(cuid())
  rateRequestId String
  rateRequest  RateRequest    @relation(fields: [rateRequestId], references: [id], onDelete: Cascade)
  lineId       String
  line         ShippingLine   @relation(fields: [lineId], references: [id])
  equipTypeId  String
  equipType    EquipmentType  @relation(fields: [equipTypeId], references: [id])
  termsJson    Json
  validTo      DateTime
  selected     Boolean        @default(false)
  createdAt    DateTime       @default(now())

  @@map("line_quotes")
}

model BookingRequest {
  id           String                @id @default(cuid())
  raisedById   String
  raisedBy     User                  @relation("BookingRequestRaisedBy", fields: [raisedById], references: [id])
  customerId   String
  customer     Customer              @relation(fields: [customerId], references: [id])
  rateSource   String                // "predefined" or "request"
  linkId       String                // ID of predefined rate or rate request
  status       BookingRequestStatus  @default(PENDING)
  cancelReason String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  // Relations
  roDocuments  RODocument[]
  jobs         Job[]

  @@map("booking_requests")
}

model RODocument {
  id               String          @id @default(cuid())
  bookingRequestId String
  bookingRequest   BookingRequest  @relation(fields: [bookingRequestId], references: [id], onDelete: Cascade)
  number           String
  fileUrl          String?
  receivedAt       DateTime
  createdAt        DateTime        @default(now())

  @@map("ro_documents")
}

model Job {
  id               String          @id @default(cuid())
  bookingRequestId String
  bookingRequest   BookingRequest  @relation(fields: [bookingRequestId], references: [id], onDelete: Cascade)
  erpJobNo         String
  openedById       String
  openedBy         User            @relation("JobOpenedBy", fields: [openedById], references: [id])
  openedAt         DateTime        @default(now())

  // Relations
  completions JobCompletion[]

  @@map("jobs")
}

model JobCompletion {
  id          String   @id @default(cuid())
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  cseUserId   String
  cseUser     User     @relation("JobCompletionCSE", fields: [cseUserId], references: [id])
  detailsJson Json
  completedAt DateTime @default(now())

  @@map("job_completions")
}

model Itinerary {
  id           String           @id @default(cuid())
  ownerId      String
  owner        User             @relation("ItineraryOwner", fields: [ownerId], references: [id])
  type         ItineraryType
  weekStart    DateTime
  status       ItineraryStatus  @default(DRAFT)
  approverId   String?
  approver     User?            @relation("ItineraryApprovedBy", fields: [approverId], references: [id])
  approveNote  String?
  submittedAt  DateTime?
  decidedAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  items ItineraryItem[]

  @@map("itineraries")
}

model ItineraryItem {
  id           String     @id @default(cuid())
  itineraryId  String
  itinerary    Itinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  date         DateTime
  customerId   String?
  customer     Customer?  @relation(fields: [customerId], references: [id])
  leadId       String?
  lead         Lead?      @relation(fields: [leadId], references: [id])
  purpose      String
  plannedTime  String
  location     String
  notes        String?
  createdAt    DateTime   @default(now()

  @@map("itinerary_items")
}

model SalesActivity {
  id             String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  customerId     String?
  customer       Customer?         @relation(fields: [customerId], references: [id])
  leadId         String?
  lead          Lead?              @relation(fields: [leadId], references: [id])
  type           SalesActivityType
  date           DateTime
  notes          String?
  outcome        String?
  nextActionDate DateTime?
  createdAt      DateTime          @default(now())

  @@map("sales_activities")
}

model Lead {
  id          String   @id @default(cuid())
  companyName String
  contact     String
  stage       String
  ownerId     String
  owner       User     @relation("LeadOwner", fields: [ownerId], references: [id])
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  salesActivities  SalesActivity[]
  itineraryItems   ItineraryItem[]

  @@map("leads")
}

model Notification {
  id        String              @id @default(cuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  channel   NotificationChannel
  subject   String
  body      String
  status    NotificationStatus  @default(PENDING)
  meta      Json?
  createdAt DateTime            @default(now())

  @@map("notifications")
}

model AuditEvent {
  id        String   @id @default(cuid())
  actorId   String
  actor     User     @relation("AuditEventActor", fields: [actorId], references: [id])
  entity    String
  entityId  String
  action    String
  payload   Json
  ts        DateTime @default(now())

  @@map("audit_events")
}